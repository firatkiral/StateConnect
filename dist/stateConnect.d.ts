export declare class State<T> {
    #private;
    valid: boolean;
    private postSubscribers;
    private preSubscribers;
    constructor(cache?: T);
    setName(name: string): this;
    getName(): string;
    subscribe(listener: (property: T | undefined) => void, preChange?: boolean): this;
    private _subscribePre;
    private _subscribePost;
    unsubscribe(listener: (property: T | undefined) => void): this;
    clearSubscribers(): this;
    protected validate(): void;
    protected invalidatePre(): void;
    protected invalidate(): void;
    onInvalidate(): void;
    onValidate(): void;
    isNode(): boolean;
    hook(input: State<any>): this;
    addHook(...args: State<any>[]): this;
    removeHook(idx: number): this;
    getHooks(): State<any>[];
    plug(incoming: State<T>): this;
    setPlug(incoming?: State<T>): this;
    isPlugged(): boolean;
    getPlug(): State<T> | undefined;
    set(newValue: T): this;
    get(): T | undefined;
    setComputeFn(computeFn?: (...args: any) => T | undefined): this;
    getAsync(): Promise<T>;
    setComputeAsyncFn(computeAsyncFn?: (...args: any) => Promise<T>): this;
}
